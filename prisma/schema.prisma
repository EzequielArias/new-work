// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Type_rol {
  id       String    @id @default(uuid())
  rol      String    @unique
  accounts Account[] // HasMany accounts
}

model Account {
  id          String           @id @default(uuid())
  name        String           @db.VarChar(50)
  image       String           @db.VarChar(255)
  email       String           @unique @db.VarChar(100)
  isDeleted   Boolean          @default(false)
  type_rol    Type_rol         @relation(fields: [Type_rol_id], references: [id]) //Belongs to a Type_rol
  Type_rol_id String
  password    String
  rt_hash     String           @default("")
  isVerified  Boolean          @default(false)
  posts       Posts[]
  comments    Comment[]
  followers   Follower[]
  following   Following[]
  academic    Academic[]
  workplace   WorkExperience[]
}

model Posts {
  id          String    @id @default(uuid())
  images      String
  description String
  account     Account   @relation(fields: [accountId], references: [id])
  accountId   String
  comment     Comment[]
}

model Comment {
  id   String @id @default(uuid())
  text String

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  Posts   Posts?  @relation(fields: [postsId], references: [id])
  postsId String?
}

model Follower {
  id        String   @id @default(uuid())
  Account   Account? @relation(fields: [accountId], references: [id])
  accountId String?
  personId String
}

model Following {
  id        String   @id @default(uuid())
  Account   Account? @relation(fields: [accountId], references: [id])
  accountId String?
  personId String
}

model Academic {
  id          String   @id @default(uuid())
  institution String?
  start       DateTime
  end         DateTime
  Account     Account? @relation(fields: [accountId], references: [id])
  accountId   String?
}

model WorkExperience {
  id          String   @id @default(uuid())
  workplace   String
  rol         String
  start       DateTime
  end         DateTime
  description String
  Account     Account? @relation(fields: [accountId], references: [id])
  accountId   String?
}
